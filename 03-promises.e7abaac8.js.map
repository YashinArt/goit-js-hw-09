{"version":3,"sources":["js/03-promises.js"],"names":["form","document","querySelector","resultDataForm","addEventListener","onAction","event","preventDefault","delay","Number","target","value","step","amount","position","createPromise","then","setTimeout","console","log","catch","shouldResolve","Math","random","promiseValue","Promise","resolve","reject"],"mappings":";AAAA,IAAMA,EAAOC,SAASC,cAAc,SAC9BC,EAAiBC,iBAAiB,SAAUC,GAGlD,SAASA,EAASC,GAChBA,EAAMC,iBAKJ,IAJF,IAAIC,EAAQC,OAAOH,EAAMI,OAAOF,MAAMG,OAClCC,EAAOH,OAAOH,EAAMI,OAAOE,KAAKD,OAChCE,EAASJ,OAAOH,EAAMI,OAAOG,OAAOF,OAE9BG,EAAW,EAAGA,GAAYD,EAAQC,GAAY,EACpDC,EAAcD,EAAUN,GACvBQ,KAAK,SAAuB,GAAA,IAApBF,EAAAA,EAAAA,SAAUN,EAAAA,EAAAA,MACjBS,WAAW,WACTC,QAAQC,IAA2BL,uBAAAA,OAAAA,EAAeN,QAAAA,OAAAA,EADrC,OAGbU,QAAQC,IAAIX,IACZA,KAGHY,MAAM,SAAuB,GAAA,IAApBN,EAAAA,EAAAA,SAAUN,EAAAA,EAAAA,MAClBS,WAAW,WACTC,QAAQC,IAA0BL,sBAAAA,OAAAA,EAAeN,QAAAA,OAAAA,EADpC,QAGZA,KAELA,GAAOI,EAIb,SAASG,EAAcD,EAAUN,GAC/B,IAAMa,EAAgBC,KAAKC,SAAW,GAClCC,EAAe,CAAEV,SAAAA,EAAUN,MAAAA,GAO/B,OANe,IAAIiB,QAAQ,SAACC,EAASC,GAC/BN,GACFK,EAAQF,GAEVG,EAAOH,KAQXT,EAAc,EAAG,MACdC,KAAK,SAAyB,GAAA,IAAtBF,EAAAA,EAAAA,SAAUN,EAAAA,EAAAA,MACjBU,QAAQC,IAA2BL,uBAAAA,OAAAA,EAAeN,QAAAA,OAAAA,EAAlD,SAEDY,MAAM,SAAyB,GAAA,IAAtBN,EAAAA,EAAAA,SAAUN,EAAAA,EAAAA,MAClBU,QAAQC,IAA0BL,sBAAAA,OAAAA,EAAeN,QAAAA,OAAAA,EAAjD","file":"03-promises.e7abaac8.js","sourceRoot":"../src","sourcesContent":["const form = document.querySelector('.form')\nconst resultDataForm = addEventListener('submit', onAction)\n\n\nfunction onAction(event){\n  event.preventDefault()  \n  let delay = Number(event.target.delay.value);\n  let step = Number(event.target.step.value);\n  let amount = Number(event.target.amount.value);\n\n    for(let position = 1; position <= amount; position += 1){\n      createPromise(position, delay)\n      .then(({ position, delay })=>{\n        setTimeout(()=>{\n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n          // Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n          console.log(delay)\n        },delay)\n    \n      })\n      .catch(({ position, delay })=>{\n        setTimeout(()=>{\n          console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n          // Notify.failure(`Rejected promise ${position} in ${delay} ms`);\n        }, delay)\n      })\n      delay+=step\n    }\n\n}\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  let promiseValue = { position, delay };\n  const result = new Promise((resolve, reject)=>{\n    if (shouldResolve) {\n      resolve(promiseValue)\n    }\n    reject(promiseValue)\n  });\n  return result\n}\n\n\n\n\ncreatePromise(2, 1500)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });"]}